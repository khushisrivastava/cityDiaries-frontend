{"version":3,"sources":["Components/AskRating.js","Components/ReviewPagination.js"],"names":["useStyles","makeStyles","theme","view","margin","spacing","name","marginBottom","textAlign","AskRating","props","useState","value","setValue","classes","id","onRate","key","className","variant","component","style","rating","onChange","event","newValue","onRatePress","QontoConnector","withStyles","alternativeLabel","top","left","right","active","borderColor","colorStyles","defaultGreen","completed","line","borderTopWidth","borderRadius","StepConnector","useQontoStepIconStyles","root","color","defaultGrey","display","height","alignItems","circle","width","backgroundColor","zIndex","fontSize","QontoStepIcon","clsx","button","instructions","marginTop","CustomizedSteppers","results","setResults","nextActive","setNextActive","loading","setLoading","questions","setQuestions","React","activeStep","setActiveStep","mainLoading","useSelector","state","steps","createReviewByUser","type","useEffect","Axios","get","then","data","ratingHandler","setTimeout","handleNext","prevActiveStep","connector","map","label","index","StepIconComponent","length","onClick","step","question","getStepContent","disabled"],"mappings":"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","file":"static/js/36.b15f36b1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Rating from '@material-ui/lab/Rating';\nimport { Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n// import colorStyles from '../Default/colorStyles';\n\nconst useStyles = makeStyles((theme) => ({\n    view: {\n        margin: theme.spacing(3),\n        // border: `1px solid ${colorStyles.defaultGreen}`,\n        // padding: theme.spacing(4),\n        // borderRadius: 20,\n        // height: 200\n    },\n    name: {\n        marginBottom: 20,\n        textAlign: \"center\"\n    },\n}));\n\nfunction AskRating(props) {\n    const [value, setValue] = useState(0);\n    const classes = useStyles();\n    const { name, id, onRate } = props;\n\n    const onRatePress = (newValue) => {\n        setValue(newValue);\n        onRate(id, newValue);\n    }\n\n    return (\n        <Box key={id} className={classes.view}>\n            <Typography className={classes.name} variant=\"h5\" component=\"h6\">\n                {name}\n            </Typography>\n            <div style={{ textAlign: \"center\" }}>\n                <Rating\n                    name=\"simple-controlled\"\n                    value={value}\n                    className={classes.rating}\n                    onChange={(event, newValue) => {\n                        onRatePress(newValue);\n                    }}\n                />\n            </div>\n        </Box>\n    )\n}\n\nexport default AskRating;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Check from '@material-ui/icons/Check';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport AskRating from './AskRating';\nimport colorStyles from '../Default/colorStyles';\nimport { CircularProgress } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport Axios from 'axios';\n\nconst QontoConnector = withStyles({\n    alternativeLabel: {\n        top: 10,\n        left: 'calc(-50% + 16px)',\n        right: 'calc(50% + 16px)',\n    },\n    active: {\n        '& $line': {\n            borderColor: colorStyles.defaultGreen,\n        },\n    },\n    completed: {\n        '& $line': {\n            borderColor: colorStyles.defaultGreen,\n        },\n    },\n    line: {\n        borderColor: '#eaeaf0',\n        borderTopWidth: 3,\n        borderRadius: 1,\n    },\n})(StepConnector);\n\nconst useQontoStepIconStyles = makeStyles({\n    root: {\n        color: colorStyles.defaultGrey,\n        display: 'flex',\n        height: 22,\n        alignItems: 'center',\n    },\n    active: {\n        color: colorStyles.defaultGreen,\n    },\n    circle: {\n        width: 8,\n        height: 8,\n        borderRadius: '50%',\n        backgroundColor: 'currentColor',\n    },\n    completed: {\n        color: colorStyles.defaultGreen,\n        zIndex: 1,\n        fontSize: 18,\n    },\n});\n\nfunction QontoStepIcon(props) {\n    const classes = useQontoStepIconStyles();\n    const { active, completed } = props;\n\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active,\n            })}\n        >\n            {completed ? <Check className={classes.completed} /> : <div className={classes.circle} />}\n        </div>\n    );\n}\n\nQontoStepIcon.propTypes = {\n    active: PropTypes.bool,\n    completed: PropTypes.bool,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        backgroundColor: colorStyles.defaultGreen,\n        color: \"white\",\n        margin: 10\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n\n\nexport default function CustomizedSteppers(props) {\n    const classes = useStyles();\n    const [results, setResults] = useState({});\n    const [nextActive, setNextActive] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [questions, setQuestions] = useState([]);\n    const [activeStep, setActiveStep] = React.useState(0);\n    const mainLoading = useSelector(state => state.loading);\n    const steps = questions;\n    const { createReviewByUser, type } = props;\n\n    useEffect(() => {\n        Axios.get(`/questions?type=${type}`).then((results) => {\n            setQuestions(results.data);\n            // setActiveStep(results.data.length);\n        })\n    }, [type])\n\n    const ratingHandler = (id, rating) => {\n        const data = { ...results };\n        data[id] = rating;\n        setResults(data);\n        setNextActive(true);\n        setLoading(true);\n        const timer = setTimeout(() => {\n            handleNext();\n            setLoading(false);\n            setNextActive(false);\n        }, 1000);\n    }\n\n\n\n    function getStepContent(step) {\n        if (questions.length > 0) {\n            return <AskRating onRate={ratingHandler} key={`q${step}`} id={`q${step + questions[0].id}`} name={questions[step].question} />\n        }\n    }\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    // const handleReset = () => {\n    //     setResults([]);\n    //     setActiveStep(0);\n    // };\n\n    return (\n        <div className={classes.root}>\n            {/* <CssBaseline /> */}\n            <Stepper alternativeLabel activeStep={activeStep} connector={<QontoConnector />}>\n                {questions.map((label, index) => (\n                    <Step key={label.id}>\n                        <StepLabel StepIconComponent={QontoStepIcon}>{index + 1}</StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n            {/* <Stepper alternativeLabel activeStep={activeStep} connector={<ColorlibConnector />}>\n                {steps.map((label) => (\n                    <Step key={label}>\n                        <StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel>\n                    </Step>\n                ))}\n            </Stepper> */}\n            <div>\n                {activeStep === steps.length ? (\n                    <div style={{ textAlign: \"center\" }}>\n                        {mainLoading ?\n                            <div style={{ textAlign: \"center\" }}>\n                                <CircularProgress color=\"secondary\" />\n                            </div> :\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                onClick={() => {\n                                    // props.history.push('/login')\n                                    createReviewByUser(results)\n                                }}\n                                className={classes.button}\n                            >\n                                Finish\n                        </Button>}\n                    </div>\n                ) : (\n                        <div>\n                            <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                            {loading ?\n                                <div style={{ textAlign: \"center\" }}>\n                                    <CircularProgress color=\"secondary\" />\n                                </div>\n                                :\n                                <div style={{ textAlign: \"center\" }}>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        disabled={activeStep === 0}\n                                        onClick={handleBack}\n                                        className={classes.button}>\n                                        Back\n                                    </Button>\n                                    {activeStep === steps.length - 1 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            onClick={() => {\n                                                createReviewByUser(results);\n                                            }}\n                                            className={classes.button}\n                                        >\n                                            Finish\n                                    </Button>\n                                        :\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            disabled={!nextActive ? true : false}\n                                            onClick={handleNext}\n                                            className={classes.button}\n                                        >\n                                            Next\n                                    </Button>\n                                    }\n                                </div>}\n                        </div>\n                    )}\n            </div>\n        </div>\n    );\n}\n"],"sourceRoot":""}