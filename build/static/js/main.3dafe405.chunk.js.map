{"version":3,"sources":["PrivateRoutes.js","Utils/sitedimension.js","Pages/SplashScreen/index.js","Pages/PlaceSearchScreen/index.js","App.js","Redux/Reducer/index.js","Redux/store.js","serviceWorker.js","firebase.js","index.js","Context/AuthContext.js","Redux/Slices/placesSlices.js","Redux/Slices/loadingSlice.js","Context/LocationContext.js","Default/apiUrl.js"],"names":["PrivateRoute","props","Component","component","rest","token","useAuthContext","render","to","pathname","state","referer","location","getWindowDimensions","window","width","innerWidth","height","innerHeight","Dimensions","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","SplashScreen","LocationSearchInput","lazy","PlaceSearchScreen","className","HomePage","MyRatingPage","FavouritesPage","RestaurantDetailsPage","RatingPage","LoginScreen","PrivacyPolicy","TermsOfUse","DesktopMode","theme","createMuiTheme","palette","primary","main","secondary","App","tokens","localStorage","getItem","JSON","parse","setToken","latitude","setLatitude","longitude","setLongitude","setLocation","country","setCountry","setLoading","parnaLat","parnaLng","parnaLoc","parnaCon","ThemeProvider","AuthContext","Provider","value","data","setItem","stringify","LocationContext","fallback","exact","path","rootReducer","combineReducers","places","placesReducer","loading","loadingReducer","configureStore","reducer","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","axios","defaults","baseURL","apiUrl","interceptors","request","use","accessToken","headers","Authorization","Promise","reject","response","MainApp","firebase","initializeApp","store","ReactDOM","document","getElementById","URL","process","href","origin","fetch","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","createContext","useContext","placesSlice","createSlice","name","initialState","all","selected","filtered","favourites","reviews","reducers","setPlaces","action","payload","setPlacesBySearch","setPlace","_","cloneDeep","setFavourites","setFavourite","setReviews","setReview","actions","loadingSlice","startLoading","finishLoading","useLocationContext"],"mappings":"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","file":"static/js/main.3dafe405.chunk.js","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useAuthContext } from './Context/AuthContext';\n\nfunction PrivateRoute({ component: Component, ...rest }, props) {\n    const { token } = useAuthContext();\n    return (\n        <Route {...rest}\n            render={(props) =>\n                token !== null ?\n                    (\n                        <Component {...rest} {...props} />\n                    ) :\n                    (\n                        <Redirect to={{ pathname: \"/login\", state: { referer: props.location } }} />\n                    )\n            }\n        />\n    )\n}\n\nexport default PrivateRoute;","import { useEffect, useState } from \"react\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return windowDimensions;\n}\n\n\nexport const Dimensions = {\n  useWindowDimensions\n};\n","import React from 'react';\nimport './index.css';\n\n\nfunction SplashScreen(props) {\n    return (\n        <div className=\"splash-view\">\n            <h4 className=\"heading\">CityDiaries</h4>\n            <h6 className=\"content\">Find the most hygienic places near you</h6>\n        </div>\n    )\n}\n\nexport default SplashScreen;","import React, { lazy } from 'react';\nimport './index.css';\n\nconst LocationSearchInput = lazy(() => import('../../Components/PlacesAutoComplete'));\n\nfunction PlaceSearchScreen(props) {\n    return (\n        <div className=\"splash-view\">\n            <h4 className=\"heading\">CityDiaries</h4>\n            <h6 className=\"content\">Find the most hygienic places near you</h6>\n            <LocationSearchInput {...props} />\n        </div>\n    )\n}\n\nexport default PlaceSearchScreen;","import React, { lazy, useEffect, useState, Suspense } from 'react';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport './App.css';\n// import OnBoardModal from './Components/OnboardModal';\nimport { LocationContext } from './Context/LocationContext';\n\nimport { AuthContext } from './Context/AuthContext';\nimport PrivateRoute from './PrivateRoutes';\nimport { Dimensions } from './Utils/sitedimension';\nimport SplashScreen from './Pages/SplashScreen/index';\nimport PlaceSearchScreen from './Pages/PlaceSearchScreen';\n\nconst HomePage = lazy(() => import('./Pages/HomePage'));\nconst MyRatingPage = lazy(() => import('./Pages/MyRatingPage'));\nconst FavouritesPage = lazy(() => import('./Pages/FavouritesPage'));\nconst RestaurantDetailsPage = lazy(() => import('./Pages/RestaurantDetailPage'));\nconst RatingPage = lazy(() => import('./Pages/RatingPage'));\nconst LoginScreen = lazy(() => import('./Pages/LoginScreen'));\nconst PrivacyPolicy = lazy(() => import('./Pages/PrivacyPolicy'));\nconst TermsOfUse = lazy(() => import('./Pages/TermsOfUse'));\nconst DesktopMode = lazy(() => import('./Components/DesktopMode'));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#FFFFFF\",\n    },\n    secondary: {\n      main: \"#52be80\",\n    },\n  },\n});\n\nfunction App() {\n  let tokens = localStorage.getItem(\"userToken\");\n  tokens = tokens === \"null\" ? JSON.parse(tokens) : tokens;\n  const [token, setToken] = useState(tokens);\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [location, setLocation] = useState(null);\n  const [country, setCountry] = useState(null);\n  const { width } = Dimensions.useWindowDimensions();\n  const [loading, setLoading] = useState(false);\n\n  const setLatLng = () => {\n    setLatitude(\"51.5074\");\n    setLongitude(\"0.1278\");\n    setLocation(\"London\");\n    setCountry(\"UK\");\n  }\n\n  useEffect(() => {\n    setLoading(true);\n    setLatLng();\n    if (latitude === null || longitude === null) {\n      const parnaLat = localStorage.getItem(\"parnaLat\");\n      const parnaLng = localStorage.getItem(\"parnaLng\");\n      const parnaLoc = localStorage.getItem(\"parnaLoc\");\n      const parnaCon = localStorage.getItem(\"parnaCon\");\n\n      if (parnaLat && parnaLng && parnaLoc && parnaCon) {\n        setLatitude(parnaLat);\n        setLongitude(parnaLng);\n        setLocation(parnaLoc);\n        setCountry(parnaCon);\n      }\n      else {\n        setLatitude(\"51.5074\");\n        setLongitude(\"0.1278\");\n        setLocation(\"London\");\n        setCountry(\"UK\");\n      }\n      setLoading(false);\n    }\n  }, []);\n\n\n  const setTokens = (data) => {\n    localStorage.setItem(\"userToken\", JSON.stringify(data));\n    setToken(data)\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      {width < 800 ?\n        <ThemeProvider theme={theme}>\n          <AuthContext.Provider value={{ token: token, setToken: setTokens }}>\n            <LocationContext.Provider value={{\n              latitude: latitude,\n              longitude: longitude,\n              location: location,\n              country: country,\n              setLatitude,\n              setLongitude,\n              setLocation,\n              setCountry\n            }}>\n              <BrowserRouter>\n                <Suspense fallback={() => { }}>\n                  <Switch>\n                    <Route exact path=\"/\" component={PlaceSearchScreen} />\n                    <Route exact path=\"/home\" component={HomePage} />\n                    <PrivateRoute exact path=\"/my-rating\" component={MyRatingPage} />\n                    <PrivateRoute exact path=\"/favourites\" component={FavouritesPage} />\n                    <Route exact path=\"/place/:type/:id\" component={RestaurantDetailsPage} />\n                    <PrivateRoute exact path=\"/rate/:type/:id\" component={RatingPage} />\n                    <Route exact path=\"/login\" component={LoginScreen} />\n                    <Route exact path=\"/privacy-policy\" component={PrivacyPolicy} />\n                    <Route exact path=\"/terms-of-use\" component={TermsOfUse} />\n                  </Switch>\n                </Suspense>\n              </BrowserRouter>\n            </LocationContext.Provider>\n          </AuthContext.Provider>\n        </ThemeProvider>\n        :\n        <Suspense fallback={() => { }}>\n          <DesktopMode />\n        </Suspense>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport placesReducer from '../Slices/placesSlices';\nimport loadingReducer from '../Slices/loadingSlice';\n\nconst rootReducer = combineReducers({\n    places: placesReducer,\n    loading: loadingReducer\n});\n\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\n\nimport rootReducer from './Reducer';\n\nexport default configureStore({ reducer: rootReducer });","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nconst firebaseConfig = {\n    apiKey: \"AIzaSyD9qolmySWaXB49otknsdHnCaDr9crU0-0\",\n    authDomain: \"citydiaries-46605.firebaseapp.com\",\n    projectId: \"citydiaries-46605\",\n    storageBucket: \"citydiaries-46605.appspot.com\",\n    messagingSenderId: \"718464157021\",\n    appId: \"1:718464157021:web:bdd17805479c91b0ae94b4\",\n    measurementId: \"G-F7HN0RGH7X\"\n};\n\nexport default firebaseConfig;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './Redux/store';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase/app';\nimport axios from 'axios';\nimport { apiUrl } from './Default/apiUrl';\nimport firebaseConfig from './firebase';\n\naxios.defaults.baseURL = apiUrl;\n\naxios.interceptors.request.use(request => {\n  const userAuth = localStorage.getItem('userToken');\n  const accessToken = userAuth ? localStorage.getItem('userToken') : \"\";\n  request.headers.Authorization = accessToken ? `Bearer ${accessToken}` : \"\";\n  return request;\n}, error => {\n  return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.log(error.response);\n  return Promise.reject(error);\n});\n\nclass MainApp extends Component {\n  componentWillMount() {\n    firebase.initializeApp(firebaseConfig)\n  }\n  render() {\n    return (\n      <Provider store={store}>\n        <App />\n      </Provider>\n    )\n  }\n}\n\n\nReactDOM.render(\n  <MainApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();","import { createContext, useContext } from 'react';\n\n//Auth Context\nexport const AuthContext = createContext({\n    token: null,\n    setToken: (data) => { }\n});\n\n//Use Auth Context\nexport function useAuthContext() {\n    return useContext(AuthContext);\n}\n","import { createSlice } from '@reduxjs/toolkit';\nimport _ from 'lodash';\n\nconst placesSlice = createSlice({\n    name: \"places\",\n    initialState: { all: [], selected: {}, filtered: [], favourites: [], reviews: [] },\n    reducers: {\n        setPlaces: (state, action) => {\n            state.all = action.payload;\n        },\n        setPlacesBySearch: (state, action) => {\n            state.filtered = action.payload;\n        },\n        setPlace: (state, action) => {\n            state.selected = _.cloneDeep(action.payload);\n        },\n        setFavourites: (state, action) => {\n            state.favourites = action.payload;\n        },\n        setFavourite: (state, action) => {\n            state.favourites = [...state.favourites, action.payload];\n        },\n        setReviews: (state, action) => {\n            state.reviews = action.payload;\n        },\n        setReview: (state, action) => {\n            state.reviews = [...state.reviews, action.payload];\n        }\n    }\n});\n\nexport const {\n    setPlaces,\n    setPlace,\n    setPlacesBySearch,\n    setFavourites,\n    setFavourite,\n    setReviews,\n    setReview\n} = placesSlice.actions;\n\nexport default placesSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\nconst loadingSlice = createSlice({\n    name: \"loading\",\n    initialState: false,\n    reducers: {\n        startLoading: (state, action) => {\n            return true;\n        },\n        finishLoading: (state, action) => {\n            return false;\n        }\n    }\n});\n\nexport const {\n    startLoading,\n    finishLoading\n} = loadingSlice.actions;\n\nexport default loadingSlice.reducer;","import { createContext, useContext } from 'react';\n\n//Auth Context\nexport const LocationContext = createContext({\n    latitude: null,\n    longitude: null,\n    location: null,\n    country: null,\n    setLatitude: (data) => { },\n    setLongitude: (data) => { },\n    setLocation: (data) => { },\n    setCountry: (data) => { }\n});\n\n//Use Auth Context\nexport function useLocationContext() {\n    return useContext(LocationContext);\n}\n","export const apiUrl = \"https://city-diaries-backend.herokuapp.com\";"],"sourceRoot":""}